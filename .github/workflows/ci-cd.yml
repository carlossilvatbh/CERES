name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '8'

jobs:
  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev python3-dev gcc
            
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements-dev.txt') }}
          
      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      - name: Debug environment
        run: |
          cd backend
          echo "Python version:"
          python --version
          echo "Pip version:"
          pip --version
          echo "Installed packages:"
          pip list
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Tests directory:"
          ls -la tests/
          
      - name: Run basic tests
        run: |
          cd backend
          python -m pytest tests/test_simple.py -v --tb=short
          
      - name: Run linting (non-blocking)
        continue-on-error: true
        run: |
          cd backend
          flake8 . || echo "Linting warnings found but not blocking"
          black --check . || echo "Code formatting issues found but not blocking"

  # Frontend Testing  
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          
      - name: Install dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile
          
      - name: Debug environment
        run: |
          cd frontend
          echo "Node version:"
          node --version
          echo "pnpm version:"
          pnpm --version
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Package.json:"
          cat package.json
          echo "Test files:"
          find src/test -name "*.test.*" -o -name "*.spec.*"
          
      - name: Type checking
        continue-on-error: true
        run: |
          cd frontend
          pnpm type-check || echo "Type checking issues found but not blocking"
          
      - name: Run linting (non-blocking)
        continue-on-error: true
        run: |
          cd frontend
          pnpm lint || echo "Linting warnings found but not blocking"
          
      - name: Run tests
        run: |
          cd frontend
          pnpm test

  # Security Scan (Basic)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Build Validation
  build-validation:
    name: Build Validation
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Build frontend
        run: |
          cd frontend
          pnpm install --frozen-lockfile
          pnpm build
          
      - name: Validate build artifacts
        run: |
          cd frontend
          ls -la dist/
          echo "Build completed successfully"
          
      - name: Basic health check
        run: |
          echo "All builds completed successfully"
          echo "Frontend: Ready for deployment"
          echo "Backend: Ready for deployment"

  # Deployment Notification
  notify-deployment:
    name: Notify Deployment
    needs: [build-validation, security-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify success
        if: needs.build-validation.result == 'success'
        run: |
          echo "✅ CERES pipeline completed successfully!"
          echo "Frontend: https://ceres-five.vercel.app"
          echo "Backend: Auto-deployed to Railway"
          
      - name: Notify failure
        if: failure()
        run: |
          echo "❌ CERES pipeline failed!"
          echo "Check the logs for details."

